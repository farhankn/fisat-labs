#include<stdio.h>
#include<string.h>

main()
{
  FILE *f1,*f2,*f3;
  int state,i=0,fo=0;
  char c[20],name[20];
  state = 0;
  f1=fopen("input.txt","r");
  f2=fopen("output.txt","w+");
  f3=fopen("keyword.txt","r+");
  fscanf(f1,"%s ",c);
  while(!feof(f1))
	{
	  state = 0;
	  i=0;
	  while(c[i]!='\0')
	    {
	      switch(state)
		{
		case 0:		if(isdigit(c[i])) state = 1;
		  else if(isalpha(c[i])) state = 5;
		  else if(c[i]=='/') state = 6;
		  else if(c[i]=='+') state = 7;
		  else if(c[i]=='-') state = 8;
		  else if(c[i]=='*') state = 9;
		  else if(c[i]=='<') state = 10;
		  else if(c[i]=='>') state = 13;
		  else if(c[i]=='!') state = 16;
		  break;
		  
		case 1:		if(c[i]== '.') state = 2;
		  else if(isdigit(c[i])) state = 1;
		  else state = 4;
		  break;
		  
		case 2: 	if(isdigit(c[i])) state = 3;
		  break;
		  
		case 3:if(isdigit(c[i])) fprintf(f2,"%s ----> Number\n",c);
		  break;
		  
		case 4: 	fprintf(f2,"%s ----> Number\n",c);	
		  break;
		  
		case 5: 	rewind(f3);
		  while(!feof(f3))
		    {
		      fscanf(f3,"%s\n",name);
		      if(!strcmp(c,name))
			{
			  fo=1;
			  break;
			}	
		    }
		  if(fo==1)
		    {
		      fprintf(f2,"%s ---->Keyword : %s \n",c,name);
		      fo = 0;
		    }	
		  else
		    fprintf(f2,"%s ----> Identifier\n",c);	
		  while(c[i]!='\0') i++;
		  break;
		  
		case 6: 	fprintf(f2,"%s ----> Division Operator\n",c);	
		  break;
		  
		case 7: 	fprintf(f2,"%s ----> Addition Operator\n",c);	
		  break;
		  
		case 8: 	fprintf(f2,"%s ----> Subtraction Operator\n",c)	;
		  break;
		  
		case 9: 	fprintf(f2,"%s ----> Multiplication Operator\n",c);	
		  break;
		  
		case 10:	if(c[i]=='=') state = 11;
		  else state = 12;
		  break;
		  
		case 11:	fprintf(f2,"%s ----> < RELOP,LE >\n",c)	;
		  break;
		  
		case 12:	fprintf(f2,"%s ----> < RELOP,LT >\n",c);
		  break;
		  
		case 13:  	if(c[i]=='=') state = 14;
		  else state = 15;
		  break;
		  
		case 14:	fprintf(f2,"%s ----> < RELOP,GE >\n",c)	;
		  break;
		  
		case 15 :  	fprintf(f2,"%s ----> < RELOP,GT >\n",c);
		  break;
		  
		case 16 : 	if(c[i]=='!') state = 16;
		  break;
		  
		case 17: 	fprintf(f2,"%s ----> < RELOP,NE >\n",c);
		  break;
		}
	      i++;
	    }
	  
	  fscanf(f1,"%s ",c);
	}
}

