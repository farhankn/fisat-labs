//Program to evaluate a postfix expression.
#include<stdio.h>
int top1=-1,top2=-1,stack2[50];
char stack1[50],post[50],infix[50];
void push(char ele);
char pop();
void main()
{
int i=0,len,x,y,t;
char op,item;
  printf("Enter a postfix expression:");
  scanf("%s",post);
postfix(stack1,top1);
  while(post[i]!='\0')
    i++;
  post[i]='#';
  post[i++]='\0';
  len=i;
  i=0;
  while(post[i]!='\0')
    {
      item=post[i++];
      while(item!='#')
	{
	  if(isalnum(item))
	    push(item);
	  else
	    {
	      op=item;
	      y=pop();
	      x=pop();
	      t=ops(x,y);
	      push(t);
	    }
 item=post[i++];

}
}
	  value=pop();
	  printf("Value is %d.\n",value);
	}
//infix to postfix.
void postfix(char *stack3,int top3)
{
 push('(');
  while(infix[k]!='\0')  //length
    k++;
  infix[k]=')';
  infix[k+1]='\0';
  while(infix[i]!='\0')
    {
      while(top>-1)
	{
	  item=infix[i++];
	  if(isalnum(item))
	    {
	      post[j]=item;
	      j++;
	    }
	  else if(item==')')
	    {
	      x=pop();
	      while(x!='(')
		{
		  post[j]=x;
		  j++;
		  x=pop();
		}
	    }
	  else if(isp(stack3[top3])>=icp(item))
	    {
	      x=pop();
	      while(isp(x)>=icp(item))
		{
		  post[j]=x;
		  j++;
		  x=pop();
		}
	      push(x);
	      push(item);
	    }
	  else if(isp(stack3[top3])<icp(item))
	      {
		push(item);
	      }
	  else
	    printf("Invalid expression.\n");
	}
    }
  post[j]='\0';
  printf("The postfix expression is as follows:\n");
  __fpurge(stdin);
  puts(post);
}


//Function to push elements.
void push(char ele)
{
  if(top>50)
    printf("Stack overflow!!\n");
  else
    {
      
      top++;
      stack[top]=ele;
      
    }
}

//Function to pop elements
int pop()
{
  char ele;
  if(top<0)
    printf("Stack underflow!!\n");
  else
    {
      ele=stack[top];
      top--;
/*	if(ele>='0' && ele<='9')
	return ele-'0';
      else if(ele>='A' && ele<='Z')
	return ele-55;
      else if(ele>='a' && ele<='z')
	return ele-87;
 */
return ele;
    }
}

int isp(char ch)
{
 switch(ch)
	{
	case '^':return 3;
	  break;
	case '*':return 2;
	  break;
	case '/':return 2;
	  break;
	case '+':return 1;
		break;
	case '-':return 1;
	  break;
	case ')':return 0;
	  break;	
		}
}

//ICP
int icp(char c)
{
  switch(c)
    {
    case '^':return 4;
      break;
    case '*':return 2;
      break;
    case '/':return 2;
      break;
    case '+':return 1;
      break;
    case '-':return 1;
      break;
    case '(':return 4;
      break;	
    }
}

