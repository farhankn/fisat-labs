#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
sem_t full,empty,mutex;
pthread_t tid1[5],tid2[5];
int buff[100],nget=0,nput=0,value=0,val1=0,val2=0,val3=0,val4=0;
void * producer(int *);
void * consumer(int *);
int n,pro[15],con[15];
main()
{
	int i,c,p;
	printf("How many items to be produced : ");
	scanf("%d",&n);
	printf("How many producers : ");
	scanf("%d",&p);
	printf("How many consumers : ");
	scanf("%d",&c);
	sem_init(&mutex,0,1);
	sem_init(&empty,0,10);
	sem_init(&full,0,1);
	for(i=1;i<=p;i++)
	{
		pro[i]=i;
		pthread_create(&tid1[i],NULL,(void *)producer,&pro[i]);
	}
	for(i=1;i<=c;i++)
	{
		con[i]=i;		
		pthread_create(&tid2[i],NULL,(void *)consumer,&con[i]);
	}
	for(i=1;i<=p;i++)
		pthread_join(tid1[i],NULL);
	for(i=1;i<=c;i++)
		pthread_join(tid2[i],NULL);
	printf("\n");
}

void * producer(int * arg)
{
	while(1)
	{
		sem_wait(&empty);
		sem_wait(&mutex);
		if(val1<n)
		{
			buff[val1%10]=val2;
			printf("Producer %d produced %d\n", arg,val2);
			val1++,val2++;
			sem_post(&mutex);
			sem_post(&full);
			sleep(5);
		}
		else
		{	printf("Producer produced all items\n");
			sem_post(&mutex);
			sem_post(&full);
			break;
		}
	}
}

void * consumer(int * arg)
{
	while(1)
	{
		sem_wait(&mutex);
		sem_wait(&full);

		if(val3>=n)
		{
			printf("consumer consumed all items\n");
			sem_post(&mutex);
			sem_post(&empty);
			break;
		}
		else
		{		
		val4=buff[val3%10];
		printf("Consumer %d consumed %d\n", arg,val4);
		val3++;val4++;
		sem_post(&mutex);
		sem_post(&empty);
		sleep(5);
		}
	}
}
