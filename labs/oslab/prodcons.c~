#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
sem_t full,empty,mutex;
pthread_t tid1[5],tid2[5];
int buff[100],nget=0,nput=0,value=0;
void * producer(int *);
void * consumer(int *);
int n;
main()
{
	int i,c,p;
	printf("How many items to be produced : ");
	scanf("%d",&n);
	printf("How many producers : ");
	scanf("%d",&p);
	printf("How many consumers : ");
	scanf("%d",&c);
	sem_init(&mutex,0,1);
	sem_init(&empty,0,10);
	sem_init(&full,0,1);
	for(i=1;i<p;i++)
		pthread_create(&tid1[i],NULL,(void *)producer,&tid1[i]);
	for(i=1;i<c;i++)
		pthread_create(&tid2[i],NULL,(void *)consumer,&tid2[i]);
	for(i=1;i<p;i++)
		pthread_join(tid1[i],NULL);
	for(i=1;i<c;i++)
		pthread_join(tid2[i],NULL);
	printf("\n");
}

void * producer(int * arg)
{
	while(1)
	{
		sem_wait(&empty);
		sem_wait(&mutex);
		if(n>=nput)
		{
			printf("hello\n");
			sem_post(&mutex);
			sem_post(&full);
			break;
		}
		else
		{	printf("hello\n");
			nput++;
			buff[nput%10]=value;
			sem_post(&mutex);
			sem_post(&full);
			printf("producer %d produced %d\n",*arg,&buff[nput%10]);
		}
	}
}

void * consumer(int * arg)
{
	while(1)
	{
		sem_wait(&mutex);
		sem_wait(&full);

		if(nget>=n)
		{
			sem_post(&mutex);
			sem_post(&full);
			break;
		}
		else
		{		
		value=buff[nget%10];
		printf("Consumer %d consumed %d\n",* arg,value);
		nget++;
		sem_post(&mutex);
		sem_post(&empty);
		}
	}
}
